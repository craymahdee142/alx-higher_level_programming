``2-matrix_divided.py``
=======================

Using "matix_divided"

importing the function from the module:
	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Checking for module docstring:
	>>> m = __import__("matrix_divided").__doc__
	>>> len(m) > 1
	True

Checking for function docstring:
        >>> f = __import__("matrix_divided").__doc__
        >>> len(f) > 1
        True

Checking for passing none matrix:
	>>> matrix_divided(None, 1)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for matrix with uneven row:
	>>> matrix = [[1, 2, 3], [4, 5, 6, 7]]
	>>> matrix_didved(matrix, 3)
	Traceback (most recent call last):
	...	
	TypeError: Each row of the matrix must have the same size

Checking for matrix as list:
        >>> matrix = "Hi"
        >>> matrix_divided(matrix, 1)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for list of mixed and non-list item:
        >>> matrix = [[1, 2, 3], "Hi"]
        >>> matrix_divided(matrix, 1)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for passing None as div:
        >>> matrix = [[1, 2, 3], [4, 5, 6]]
        >>> matrix_divided(matrix, None)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for mix of ints, floats and non numbers:
        >>> matrix = [[1, 2.0, 'A'], [4.2, 5.9, 6]]
        >>> matrix_divided(matrix, 1)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for mix of ints, floats and bool:
        >>> matrix = [[1, 2.0, False], [4.2, 5.9, True]]
        >>> matrix_divided(matrix, 5)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking for denomirator as non number:
        >>> matrix = [[1, 2, 3], ["Hello"]]
        >>> matrix_divided(matrix, "Hello")
        Traceback (most recent call last):
        ...
        TypeError: div must be a number

Checking for mix of ints, floats and tuple:
        >>> matrix = [[1, 2.0, (1)], [4.2, 5.9, 6]]
        >>> matrix_diviede(matrix, 5)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats  

Checking for div by 0:
         >>> matrix_divided(matrix, 0)
         Traceback (most recent call last):
         ...
         TypeError: division by zero      

Checking for usual division:
         >>> matrix = [[1, 2, 3], [4, 5, 6]]
         >>> matrix_divided(matrix, 3)
	 [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
         >>> matrix
         [[1, 2, 3], [4, 5, 6]] 

Checking for division by float:
         >>> matrix = [[1, 2, 3], [4, 5, 6]]
         >>> matrix_divided(matrix, 2.1)
         [[0.47, 0.95, 1.43], [1.90, 2.38, 2.86]]
         >>> matrix
         [[1, 2, 3], [4, 5, 6]]      

Checking for negative numerator and denomerator:
         >>> matrix = [[-1, -2, -3], [-4, -5, -6]]
         >>> matrix_divided(matrix, 3)
         [[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]
         >>> matrix
         [[1, 2, 3], [4, 5, 6]]                 

Checking for empty list:
         >>> matrix = []
         >>> matrix_divided(matrix, 1)
         []
         >>> matrix
         []

Checking for 1xn matrix:
         >>> matrix = [[1, 2, 3]]
         >>> matrix_divided(matrix, 2)
         [[0.5, 1.0, 1.5]]
         >>> matrix
         [[1, 2, 3]]      

Checking for nx1 matrix:
         >>> matrix = [[1], [2], [3]]
         >>> matrix_divided(matrix, 2)
         [[0.5], [1.0], [1.5]]
         >>> matrix
         [[1, 2, 3]]    

Checking for division by infinity:
         >>> matrix_divided(matrix, float("inf"))
         [[0.0], [0.0], [0.0]]

Checking for division with infinity in numerator:
         >>> matrix = [[1, float("inf", 3], [4, 5, 6]]
         >>> matrix_divided(matrix, 1)
         [[1.0, inf, 3.0], [4, 5, 6]]
       
Checking for division with infinity in numerator and denomerator:
        >>> matrix = [[1, float("inf", 3], [4, 5, 6]]
        >>> matrix_divided(matrix, 1)
	[[0.0, nan, 0.0], [0.0, 0.0, 0.0]]

Checking for no args:
	>>> matrix_divided()
	Traceback (most recent call last):
	...
	TypeError: matrix_divived() missing 2 required positional arguments: matrix and div

Checking for 1 args:
        >>> matrix_divided(matrix)
        Traceback (most recent call last):
        ...
        TypeError: matrix_divived() missing 1 required positional arguments: matrix and div 

Checking for more than two args:
        >>> matrix_divided(matrix, 1, 2)
        Traceback (most recent call last):
        ...
        TypeError: matrix_divived() expectedt 2 arguments but 3 were given


